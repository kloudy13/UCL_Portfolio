%% Question 2 Part 1.1 & 1.2: Implement PCA and K means on random data
clear all; close all;
%% Setup
% take as input data generated by further modified MYgenData function
% this is done to test the PC algorithm (in function format below)
RNG = 7;  % time seed
k = 3;    % no of clusters/groups
kp = 4;   % PCA k parameter (no. of dimensions required after reduction)
N = 6;    % col dimension
M = 150;  % row dimension

[data] = MYgenData3(RNG,M,N,k); % ensures same data sets always generated

% generate augmented data matrix including labels (needed for part 2)
D = zeros(M,N+1);
D(:,[1:N]) = data;
D([1:50],N+1) = 1;
D([51:100],N+1) = 2;
D([101:150],N+1) = 3;
S = D(:,N+1); %true labels vector 

% Center data: 
% by taking mean of each column and substracting from column data values
dataC = data-mean(data);

%% Part 2.1.1 Implement PCA
% PCA implemented as a function (can be found at bottom of file)

% output function and test 
dataPC = MyPCA(dataC,kp); 

%% Part 2.1.2 Implement K-means
% using K-menas fucntion from Question 1 and the occe function (to get
% the objective/ loss function, which is teh minimum error)

[y,centr] = MyKmeansAd2(dataPC,k);
C = y(:,end); % last column of y contains the classification labels
occe = MyOcceAd(S,C,k); 
% good but in question 2.1.3 objective function is defined as: 
% EX(C1, . . . , Ck; c1, . . . , ck) = ? ? ?x ? ci?^2;
% (norm squear of differnece distance between x and centroid) sum over all 
% x's in cluster and over all clusters. 
% the following definition is implemneted through function MyLoss:

[EX mindist] = MyLoss(dataPC,centr,k);



fprintf('The objective function (minimum error) for K-menas clustering on the PCA reduced data is %.3f and the clustering vector can be found stored under variable C \n',occe);
%% PCA function

function [dataPC] = MyPCA(dataC,kp) 
% Purpose: perform Principle Component Analysis and return reduced data set
% Input: data, which needs to be centred and the number of new principal
% components (kp)
% Output: Reduced data set

    %%%% setup %%%%
    [M N] = size(dataC);
    %%%% test %%%% 
    if round(mean(dataC)) ~= 0
        error('Error: need to input centered data');
        return;
    end
    %%%% Calculate covariance matrix %%%%
    COV = (1/M)*dataC'*dataC; %as per assignment hint
    %%%% Find eigensystem using Matlab command %%%%
    [vect, val] = eig(COV); 
    % vector matrix in descending eigenvector order, such that need to extract 
    %the last kp columns of this matrix, which will form PC feature map. 

    %%%% Make feature map & reorder %%%%
    PCmap = vect(:, (end-kp+1):end);
    PCnew = zeros(size(PCmap));
        for i = 1:kp
            PCnew(:,i) = PCmap(:,kp+1-i);
        end
    PCmap = PCnew;
    %%%% Reduce data to PC form %%%%  
    dataPC = dataC*PCmap;
end
